@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
/* space */
/* color */
/* typography */
.socials-items {
  align-items: center;
}
.socials-items .socials-item {
  color: inherit;
  padding: 0 1rem;
  font-size: 1.5rem;
}

.fm-header-thegem-01 {
  font-size: 1.3rem;
}
.fm-header-thegem-01 .item {
  margin-top: 1.1764705882rem;
  margin-bottom: 1.1764705882rem;
}
.fm-header-thegem-01 .btn {
  font-size: 1.3rem;
}
.fm-header-thegem-01 .link-text > .col,
.fm-header-thegem-01 .link-text .btn {
  white-space: nowrap;
}
.fm-header-thegem-01 .link-text .link {
  color: inherit;
}
.fm-header-thegem-01 .link-text .angle-right::before {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1.1' x='0px' y='0px' viewBox='0 0 66.91 122.88' style='fill:%23fff;' xml:space='preserve'%3E%3Cg%3E%3Cpath d='M1.95,111.2c-2.65,2.72-2.59,7.08,0.14,9.73c2.72,2.65,7.08,2.59,9.73-0.14L64.94,66l-4.93-4.79l4.95,4.8 c2.65-2.74,2.59-7.11-0.15-9.76c-0.08-0.08-0.16-0.15-0.24-0.22L11.81,2.09c-2.65-2.73-7-2.79-9.73-0.14 C-0.64,4.6-0.7,8.95,1.95,11.68l48.46,49.55L1.95,111.2L1.95,111.2L1.95,111.2z'/%3E%3C/g%3E%3C/svg%3E");
  background-repeat: no-repeat;
  content: "";
  display: inline-block;
  width: 0.85rem;
  height: 0.85rem;
  margin-right: 0.3rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/