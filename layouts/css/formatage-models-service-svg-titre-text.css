@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
/* space */
/* color */
/* typography */
.reinsuranceItem {
  max-width: 270px;
  text-align: center;
  margin: 0 auto 40px;
}
.reinsuranceItem__iconContainer {
  height: 80px;
  width: 80px;
  background-color: #f8f8f8;
  border-radius: 50%;
  border: 1px solid #efefef;
  margin: 0 auto 22px;
}
.reinsuranceItem__assistance {
  height: 80px;
  width: 80px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.reinsuranceItem__assistance svg {
  height: 60px;
  width: 60px;
}
.reinsuranceItem__title {
  margin-bottom: 13px;
  color: #1b1918;
  font-style: normal;
  font-weight: 700;
  font-size: 20px;
  line-height: 24px;
}
.reinsuranceItem__title span {
  color: #49a0a2;
}
.reinsuranceItem__description {
  color: #1b1918;
  font-weight: 300;
  font-size: 1em;
  line-height: 20px;
}

.reinsuranceBlock {
  max-width: 970px;
  width: 100%;
  margin: auto auto 70px;
}
.reinsuranceBlock__hr {
  height: 1px;
  padding: 0;
  color: #cbcbcb;
  background-color: #cbcbcb;
  margin-top: 2.5em;
  margin-bottom: 1.8em;
  border: none;
}
.reinsuranceBlock__h3 {
  text-align: center;
  margin-top: 3.4em;
  margin-bottom: 3.3em;
  font-style: normal;
  font-weight: 700;
  font-size: 1.56em;
  line-height: 29px;
}
.reinsuranceBlock__container {
  width: calc(100% + 16px);
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  box-sizing: border-box;
}
.reinsuranceBlock__bouton .btn {
  background: #49a0a2;
  color: #fff;
  border-radius: 0;
  padding: 1.25em 4.18em;
  font-size: 1.4rem;
  border-color: #49a0a2;
}
@media only screen and (max-width: 440px) {
  .reinsuranceBlock__bouton .btn {
    padding: 1em 1.25em;
    font-size: 1em;
    display: flex;
    line-height: 1;
    align-items: center;
  }
}
.reinsuranceBlock__bouton .btn i {
  padding-right: 0.375em;
}
.reinsuranceBlock__bouton .btn:hover {
  color: #fff;
}
.reinsuranceBlock__bouton {
  margin: 1.875em 0;
  display: flex;
  justify-content: center;
  cursor: pointer;
}

body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

.paragraphList {
  margin-bottom: 4rem;
  text-align: center;
}
.paragraphList ul {
  list-style: none;
  padding: 0;
}
.paragraphList ul li {
  margin-top: 5px;
  display: flex;
  justify-content: start;
  align-items: center;
}
.paragraphList ul li .list_icon {
  width: 25px;
  height: 25px;
  display: flex;
  justify-content: center;
  background-color: ghostwhite;
  align-items: center;
  border-radius: 20px;
  padding: 5px;
  color: teal;
  margin-right: 15px;
}
@media only screen and (max-width: 440px) {
  .paragraphList ul li .list_icon {
    width: 18px;
    height: 18px;
    font-size: 11px;
  }
}
.paragraphList ul li p {
  text-align: left;
  font-weight: 700;
  font-size: 1.54rem;
  line-height: 18px;
  color: #1b1918;
}
.paragraphList ul li p span {
  color: #49a0a2;
}

.serviceBlock-module {
  flex-basis: calc(50% - 15px);
  margin: 0 auto 5rem;
  width: 100%;
}
.serviceBlock-module__container {
  background: linear-gradient(36.64deg, #007891 14.08%, #49a0a2);
  display: flex;
  justify-content: center;
  align-items: center;
}
.serviceBlock-module__serviceMessage {
  background-color: #fff;
  margin: 4rem 5rem 6rem;
  padding: 2rem 2rem 6rem;
  position: relative;
  text-align: center;
  color: #1b1918;
}
@media only screen and (max-width: 991px) {
  .serviceBlock-module__serviceMessage {
    margin: 4rem 3rem 6rem;
  }
}
.serviceBlock-module__serviceTitle {
  line-height: 1.105;
  margin-bottom: 4rem;
}
.serviceBlock-module__serviceDescription {
  font-weight: 400;
}
.serviceBlock-module__button {
  text-decoration: none;
  color: #fff;
  background: #1b1918;
  border-radius: 2px;
  font-style: normal;
  font-weight: 700;
  font-size: 1.54rem;
  line-height: 24px;
  padding: 10px 20px;
  bottom: 0;
  transform: translateY(18%);
  display: inline-block;
}
.serviceBlock-module__button a {
  color: #FFF;
}
.serviceBlock-module__button i {
  font-size: 1.4rem;
  font-weight: 200;
  margin-left: 10px;
}
@media only screen and (max-width: 991px) {
  .serviceBlock-module__button {
    margin-top: 10px;
    position: relative;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/