<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\formatage_models\FormatageModelsThemes;
use Stephane888\Debug\Repositories\ConfigDrupal;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;

/**
 *
 * @file
 * Primary module hooks for formatage models module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * implement hook_entity_operation
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function formatage_models_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->isNew())
    return [];
  /**
   * Ajout la possibilité de duppliquer toutes la configuration.
   */
  $entitytypeId = $entity->getEntityTypeId();
  $entityId = $entity->id();
  switch ($entitytypeId) {
    case 'paragraphs_type':
      return [
        'clone' => [
          'title' => t('Clone by formatage models'),
          'weight' => 50,
          'url' => Url::fromRoute('formatage_models.clone_entity', [
            'entity_type_id' => $entitytypeId,
            'id' => $entityId,
            'etatpe' => 'init',
            'clone_id' => 'none'
          ], [
            'query' => \Drupal::destination()->getAsArray()
          ])
        ]
      ];
      break;
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Adds a textfield for container, label and value.
 */
function formatage_models_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $classes = $plugin->getThirdPartySetting('formatage_models', 'classes', [
    'container' => '',
    'title' => '',
    'value' => '',
    'item' => ''
  ]);
  $element['classes'] = [
    '#type' => 'details',
    '#title' => t('Field Formatter'),
    '#open' => false,
    '#weight' => -30
  ];
  $element['classes']['container'] = [
    '#type' => 'textfield',
    '#title' => t('Field container class'),
    '#default_value' => $classes['container']
  ];
  $element['classes']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Field label class'),
    '#default_value' => $classes['title']
  ];
  $element['classes']['value'] = [
    '#type' => 'textfield',
    '#title' => t('Field value class'),
    '#default_value' => $classes['value']
  ];
  $element['classes']['item'] = [
    '#type' => 'textfield',
    '#title' => t('Class for each item'),
    '#default_value' => $classes['item']
  ];
  //
  if (\Drupal::moduleHandler()->moduleExists('token')) {
    $element['token_help'] = [
      '#theme' => 'token_tree_link',
      '#token_types' => [
        $field_definition->getTargetEntityTypeId()
      ]
    ];
  }
  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Adds a custom class to the field's class attribute
 * according to the field formatter settings.
 */
function formatage_models_preprocess_field(&$variables) {
  
  // Add class for whole field.
  if (!empty($variables['element']['#third_party_settings']['formatage_models']['classes'])) {
    $classContainer = $variables['element']['#third_party_settings']['formatage_models']['classes']['container'];
    $classTitle = $variables['element']['#third_party_settings']['formatage_models']['classes']['title'];
    $classValue = $variables['element']['#third_party_settings']['formatage_models']['classes']['value'];
    $classItem = !empty($variables['element']['#third_party_settings']['formatage_models']['classes']['item']) ? $variables['element']['#third_party_settings']['formatage_models']['classes']['item'] : '';
    
    /** @var \Drupal\Core\Utility\Token $token */
    $token = \Drupal::service('token');
    /** @var \Drupal\Core\Entity\EntityInterface $object */
    $object = $variables['element']['#object'];
    //
    $classContainer = $token->replace($classContainer, [
      $object->getEntityTypeId() => $object
    ], [
      'clear' => true
    ]);
    $classContainer = explode(' ', $classContainer);
    foreach ($classContainer as $thisClass) {
      $variables['attributes']['class'][] = Html::escape($thisClass);
    }
    //
    $classTitle = $token->replace($classTitle, [
      $object->getEntityTypeId() => $object
    ], [
      'clear' => true
    ]);
    $classTitle = explode(' ', $classTitle);
    foreach ($classTitle as $thisClass) {
      $variables['title_attributes']['class'][] = Html::escape($thisClass);
    }
    //
    $classValue = $token->replace($classValue, [
      $object->getEntityTypeId() => $object
    ], [
      'clear' => true
    ]);
    $classValue = explode(' ', $classValue);
    foreach ($classValue as $thisClass) {
      $variables['content_attributes']['class'][] = Html::escape($thisClass);
    }
    //
    if (!empty($variables['items'])) {
      $classItem = explode(' ', $classItem);
      foreach ($variables['items'] as &$value) {
        $value['attributes']->addClass($classItem);
      }
    }
    
    // if (!empty($classValue)) {
    // // \Stephane888\Debug\debugLog::kintDebugDrupal($variables,
    // // 'formatage_models_preprocess_field--', true);
    // }
  }
}

/**
 * à quoi sert cette function.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @return array
 */
function addTextareaTreeMultipleMoreAjax(&$form, FormStateInterface $form_state) {
  $parents = $form_state->getTriggeringElement()['#parents'];
  $nbre = count($parents);
  $field = $form;
  for ($i = 0; $i < ($nbre - 2); $i++) {
    if (!empty($parents[$i]) && !empty($field[$parents[$i]]))
      $field = $field[$parents[$i]];
  }
  $form_state->get('nombre_field');
  return $field;
}

/**
 * Implements hook_preprocess_HOOK() for paragraph.html.twig.
 * UREGENT : il faut proteger dans un environnement comme wb-horizon et tous les
 * access crayons.
 * On peut le faire via des roles specifiques aussi en function domain au niveau
 * du compte utilisateur.
 *
 * @see contextual_preprocess()
 * @see template_preprocess_paragraph()
 */
function formatage_models_preprocess_paragraph(&$variables) {
  // dump($variables);
  if (\Drupal::currentUser()->id()) {
    // add class .contextual-region
    $variables['attributes']['class'][] = 'contextual-region';
    // Paragraph templates don't normally print the title_suffix, so add the
    // contextual links to the content render array.
    /**
     * Les liens contextuels posent un probleme notament lors de la traduction.
     */
    // if (isset($variables['title_suffix']['contextual_links'])) {
    /**
     *
     * @var \Drupal\paragraphs\Entity\Paragraph $paragraph
     */
    $paragraph = $variables['paragraph'];
    $variables['content']['contextual_links'] = [
      '#type' => 'contextual_links_placeholder',
      '#id' => 'paragraph:paragraph=' . $paragraph->id() . ':langcode=' . $paragraph->language()->getId()
    ];
    $variables['content']['contextual_links']['#weight'] = -100;
    // add special place to no-edit (doit etre configurable).
    $routes = [
      'vuejs_entity.model_choisie_form',
      'buildercv.build_cv'
    ];
    $route_name = \Drupal::routeMatch()->getRouteName();
    if (!in_array($route_name, $routes) && !\Drupal::service('router.admin_context')->isAdminRoute()) {
      $variables['content']['formatage_models_quickly_edit'] = [
        '#theme' => 'formatage_models_quickly_edit',
        '#contextual_links' => $variables['content']['contextual_links']
      ];
    }
    // }
  }
}

/**
 */
function formatage_models_preprocess_views_view_unformatted(&$vars) {
  if (\Drupal::currentUser()->id()) {
    // Liste d'entité qu'on peut editer avec le crayon.
    // on doit rentre cette liste editable.
    $entities = [
      '#paragraph',
      '#node',
      '#blocks_contents',
      '#block_content',
      '#commerce_product',
      '#site_type_datas',
      '#site_internet_entity'
    ];
    if (!empty($vars['rows'])) {
      foreach ($vars['rows'] as &$row) {
        foreach ($entities as $keyEntity) {
          if (!empty($row['content'][$keyEntity])) {
            if (empty($row['attributes'])) {
              $row['attributes'] = new \Drupal\Core\Template\Attribute();
            }
            /**
             *
             * @var \Drupal\Core\Template\Attribute $attribute
             */
            $attribute = $row['attributes'];
            $attribute->addClass('contextual-region');
            $row['content']['formatage_models_quickly_edit'] = [
              '#theme' => 'formatage_models_quickly_edit',
              '#entity' => $row['content'][$keyEntity]
            ];
            break;
          }
        }
      }
    }
  }
}

function formatage_models_preprocess_owlcarousel_views(&$vars) {
  if (\Drupal::currentUser()->id()) {
    // Liste d'entité qu'on peut editer avec e crayon.
    $entities = [
      '#paragraph',
      '#node',
      '#blocks_contents',
      '#block_content',
      '#commerce_product',
      '#site_type_datas',
      '#site_internet_entity'
    ];
    if (!empty($vars['rows'])) {
      foreach ($vars['rows'] as &$row) {
        foreach ($entities as $keyEntity) {
          if (!empty($row[$keyEntity])) {
            if (empty($row['attributes'])) {
              $row['attributes'] = new \Drupal\Core\Template\Attribute();
            }
            /**
             *
             * @var \Drupal\Core\Template\Attribute $attribute
             */
            $attribute = $row['attributes'];
            $attribute->addClass('contextual-region');
            $row['formatage_models_quickly_edit'] = [
              '#theme' => 'formatage_models_quickly_edit',
              '#entity' => $row[$keyEntity]
            ];
            break;
          }
        }
      }
    }
  }
}

function formatage_models_entity_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($build['#view_mode'] == 'full') {
    // dump($build);
    // On charge l'outil d'edition via le custom bouton.
    $entities = [
      'commerce_product',
      'node',
      'blocks_contents',
      'paragraph',
      'block_content',
      'commerce_product'
    ];
    //
    if (!empty($build['#entity_type']))
      if (in_array($build['#entity_type'], $entities)) {
        // dump($build);
        $build['formatage_models_quickly_edit'] = [
          '#theme' => 'formatage_models_quickly_edit',
          '#entity' => \Drupal::routeMatch()->getParameter($build['#entity_type'])
        ];
      }
    // else {
    // dump($build);
    // }
  }
}

/**
 * Implement hook_preprocess_page
 */
function formatage_models_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name === 'layout_builder.overrides.node.view' || str_contains($route_name, 'layout_builder.')) {
    $variables['page']['content']['#attached']['library'][] = 'formatage_models/formatage-models-admin';
  }
  elseif ($route_name == 'entity.paragraphs_type.collection') {
    $variables['page']['content']['#attached']['library'][] = 'formatage_models/formatage-models-admin-paragraph';
  }
  
  if (!empty($variables['logged_in'])) {
    
    // Il faudra que ces liens soient configurable (settings.form).
    $routes = [
      'vuejs_entity.model_choisie_form',
      'buildercv.build_cv'
    ];
    $conf = ConfigDrupal::config('formatage_models.configvuejsedit');
    if (!empty($conf['active_edit_config']) && !in_array($route_name, $routes) && !\Drupal::service('router.admin_context')->isAdminRoute()) {
      $variables['page']['content']['entity_edit_vuejs'] = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'id' => 'entity_edit_by_vuejs'
        ],
        '#attached' => [
          'library' => [
            'formatage_models/edit_entity'
          ]
        ]
      ];
    }
  }
}

/**
 * Permet de supprimer les blocs qui ne sont pas generelement utilisé.
 *
 * @param array $definitions
 * @param array $extra
 */
function formatage_models_plugin_filter_layout__layout_builder_alter(array &$definitions, array $extra) {
  foreach ($definitions as $layout_id => $layout) {
    $module = $layout->getProvider();
    if (!$module) {
      unset($definitions[$layout_id]);
    }
    elseif ($module == 'layout_builder' || $module == 'layout_discovery' || $module == 'bootstrap_barrio') {
      unset($definitions[$layout_id]);
    }
  }
}

/**
 * Implement hook__layouts
 */
function formatage_models_preprocess_layout(&$vars) {
  if (!empty($vars['region_attributes'])) {
    foreach ($vars['region_attributes'] as $key => $region_attribute) {
      $vars['region_attributes'][$key]->addClass('layout-region lyt');
    }
  }
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param unknown $vars
 */
function formatage_models_preprocess_formatage_models_menu01(&$vars) {
  FormatageModelsThemes::formatage_models_menu01($vars);
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param unknown $vars
 */
function formatage_models_preprocess_formatage_models_contact_page(&$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param unknown $vars
 */
function formatage_models_preprocess_formatage_models_contact(&$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @param array $vars
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_blog_call_toaction(&$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @param array $vars
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_description(&$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @param array $vars
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_empty_results(&$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @param array $vars
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_page_bigbackground(&$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 * Implement hook__layouts
 */
function formatage_models_preprocess_blb_section(&$vars) {
  if (!empty($vars['region_attributes'])) {
    foreach ($vars['region_attributes'] as $key => $region_attribute) {
      $vars['region_attributes'][$key]->addClass('layout-region blb');
    }
  }
  // if ($vars['theme_hook_original'] == 'blb_section')
}

/**
 * Implements hook_theme().
 */
function formatage_models_theme($existing, $type, $theme, $path) {
  $hooks = FormatageModelsThemes::getThemeHooks();
  // Template to edit quickly paragraphe.
  $hooks['formatage_models_quickly_edit'] = [
    'preprocess functions' => [
      'template_preprocess_formatage_models_quickly_edit'
    ],
    'render element' => 'element',
    'file' => 'themes/formatage_models.theme.inc'
  ];
  return $hooks;
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $vars
 */
function formatage_models_preprocess_formatage_models_comments(&$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $vars
 */
function formatage_models_preprocess_formatage_models_hero_thegem_18(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $variables
 */
function formatage_models_preprocess_formatage_models_images_bg(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  // FormatageModelsThemes::ApplyAttributes($variables);
  FormatageModelsThemes::mergeContentAttributes($variables);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $variables
 */
function formatage_models_preprocess_formatage_models_services_sliders(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $vars
 */
function formatage_models_preprocess_formatage_models_titre(array &$vars) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  // FormatageModelsThemes::ApplyAttributes($variables);
  // FormatageModelsThemes::mergeContentAttributes($variables);
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $vars
 */
function formatage_models_preprocess_formatage_models_lmsg_call_toaction(array &$vars) {
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $variables
 */
function formatage_models_preprocess_formatage_models_service_icone(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
  FormatageModelsThemes::mergeContentAttributes($variables);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $variables
 */
function formatage_models_preprocess_formatage_models_expert_solution(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $variables
 */
function formatage_models_preprocess_formatage_models_image_after_before(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 * @param array $variables
 */
function formatage_models_preprocess_formatage_models_hero_slider_popup(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @param array $variables
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_galery_title(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @param array $variables
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_blog_list(array &$variables) {
  FormatageModelsThemes::ApplyAttributes($variables);
  // FormatageModelsThemes::addLayoutEditBlock($variables);
}

/**
 *
 * @param array $variables
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_teaser(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  // FormatageModelsThemes::ApplyAttributes($variables);
  FormatageModelsThemes::mergeContentAttributes($variables);
}

/**
 *
 * @param array $variables
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_teaser_a_la_une(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @param array $variables
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_realisation_big(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @param array $variables
 * @deprecated remove before 4x; ( il faut ajouter la function build
 *             dans le plugin).
 */
function formatage_models_preprocess_formatage_models_realisation_small(array &$variables) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  FormatageModelsThemes::ApplyAttributes($variables);
}

/**
 *
 * @param array $variables
 * @deprecated remove before 4x; ( il faut ajouter la function build dans le
 *             plugin).
 */
function formatage_models_preprocess_formatage_models_bg_header(array &$vars) {
  // FormatageModelsThemes::addLayoutEditBlock($variables);
  // FormatageModelsThemes::ApplyAttributes($variables);
  FormatageModelsThemes::mergeContentAttributes($vars);
}

/**
 *
 * @param array $vars
 */
function formatage_models_preprocess_views_view_render_page(&$vars) {
  module_load_include('inc', 'views', 'views.theme');
  template_preprocess_views_view($vars);
  /**
   *
   * @var \Drupal\views\ViewExecutable $view
   */
  $view = $vars['view'];
  //
  $css = $view->display_handler->getOption('view_row_css');
  
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    $vars['rows']['attributes'] = $Attribute;
  }
  //
  $css = $view->display_handler->getOption('view_header_css');
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    $vars['header']['#attributes'] = $Attribute;
  }
  //
  $css = $view->display_handler->getOption('view_form_css');
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    if (!empty($vars['exposed']['#attributes']))
      if (is_object($vars['exposed']['#attributes']))
        $vars['exposed']['#attributes']->addClass($css);
      else {
        foreach ($css as $value) {
          $vars['exposed']['#attributes']['class'][] = $value;
        }
      }
    else
      $vars['exposed']['#attributes'] = $Attribute;
  }
  //
  $css = $view->display_handler->getOption('view_footer_css');
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    $vars['footer']['#attributes'] = $Attribute;
  }
}

/**
 *
 * @param array $vars
 */
function formatage_models_preprocess_views_view_render(&$vars) {
  module_load_include('inc', 'views', 'views.theme');
  template_preprocess_views_view($vars);
  /**
   *
   * @var \Drupal\views\ViewExecutable $view
   */
  $view = $vars['view'];
  //
  $css = $view->display_handler->getOption('view_row_css');
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    $vars['rows']['attributes'] = $Attribute;
  }
  //
  $css = $view->display_handler->getOption('view_header_css');
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    $vars['header']['#attributes'] = $Attribute;
  }
  //
  $css = $view->display_handler->getOption('view_form_css');
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    if (!empty($vars['exposed']['#attributes'])) {
      if (is_array($vars['exposed']['#attributes'])) {
        foreach ($css as $v) {
          $vars['exposed']['#attributes']['class'][] = $v;
        }
      }
      else
        $vars['exposed']['#attributes']->addClass($css);
    }
    else
      $vars['exposed']['#attributes'] = $Attribute;
  }
  //
  $css = $view->display_handler->getOption('view_footer_css');
  if ($css) {
    $Attribute = new Attribute();
    $css = explode(" ", $css);
    $Attribute->addClass($css);
    $vars['footer']['#attributes'] = $Attribute;
  }
}

/**
 *
 * @param array $vars
 */
function template_preprocess_formatage_models_swiperjsimage(&$vars) {
  //
}






